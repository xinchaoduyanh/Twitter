openapi: 3.0.3
info:
  title: Twitter clone Typescript 2023 by Josee
  description: üå∏üå∏üå∏
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.i npm
servers:
  
  - url: http://localhost:4000
tags:
  - name: users
    description: API li√™n quan t·ªõi user
  - name: medias
    description: API li√™n quan t·ªõi media
  - name: Tweets
    description: API li√™n quan t·ªõi tweet
  - name: Bookmark
    description: API li√™n quan t·ªõi bookmark
  - name: Like
    description: API li√™n quan t·ªõi like
  - name: Search
    description: API li√™n quan t·ªõi search
  - name: Conversation
    description: API li√™n quan t·ªõi Conversation

paths:
  /users/{username}:
    get:
      tags:
        - users
      summary: L·∫•y th√¥ng tin user
      description: L·∫•y th√¥ng tin user hi·ªán t·∫°i
      operationId: getMe
      parameters:                 # Th√™m ph·∫ßn parameters
        - name: username          # ƒê·∫∑t t√™n cho tham s·ªë
          in: path                # X√°c ƒë·ªãnh tham s·ªë l√† path parameter
          required: true          # Ch·ªâ ƒë·ªãnh r·∫±ng tham s·ªë l√† b·∫Øt bu·ªôc
          schema:
            type: string
      responses:
        '200':
          description: Get user profile success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Get user profile success'
                  result:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not found'
  /users/change_password:
    post:
      tags:
        - users
      summary: Thay ƒë·ªïi m·∫≠t kh·∫©u
      description: Thay ƒë·ªïi m·∫≠t kh·∫©u c·ªßa ng∆∞·ªùi d√πng
      operationId: changePassword
      security:
        - BearerAuth: []
      requestBody:
        description: Th√¥ng tin m·∫≠t kh·∫©u m·ªõi v√† m·∫≠t kh·∫©u c≈©
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Change password success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Change password success'
        '401':
          description: Old password is not match
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Old password is not match'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      password:
                        type: object
                        properties:
                          type:
                            type: string
                            example: 'field'
                          value:
                            type: string
                            example: '12313123123'
                          msg:
                            type: string
                            example: 'Your password must include at least one symbol, one uppercase letter, one lowercase letter, and one number'
                          path:
                            type: string
                            example: 'password'
                          location:
                            type: string
                            example: 'body'
                      confirm_password:
                        type: object
                        properties:
                          type:
                            type: string
                            example: 'field'
                          value:
                            type: string
                            example: 'Duyanh11!123'
                          msg:
                            type: string
                            example: 'Confirm password must match the password'
                          path:
                            type: string
                            example: 'confirm_password'
                          location:
                            type: string
                            example: 'body'
  /users/follow:
    post:
      tags:
        - users
      summary: Theo d√µi ng∆∞·ªùi d√πng
      description: Theo d√µi m·ªôt ng∆∞·ªùi d√πng kh√°c
      operationId: followUser
      security:
        - BearerAuth: []
      requestBody:
        description: Th√¥ng tin ng∆∞·ªùi d√πng c·∫ßn theo d√µi
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowRequest'
      responses:
        '200':
          description: Follow success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Follow success'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid followed user id'
  /users/forgot_password:
    post:
      tags:
        - users
      summary: Qu√™n m·∫≠t kh·∫©u
      description: Y√™u c·∫ßu qu√™n m·∫≠t kh·∫©u v√† nh·∫≠n h∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
      operationId: forgotPassword
      security:
        - BearerAuth: []
      requestBody:
        description: Th√¥ng tin ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Check your email to reset password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Check your email to reset password'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      email:
                        type: object
                        properties:
                          type:
                            type: string
                            example: 'field'
                          value:
                            type: string
                            example: 'aaaaa'
                          msg:
                            type: string
                            example: 'Email is invalid'
                          path:
                            type: string
                            example: 'email'
                          location:
                            type: string
                            example: 'body'
  /users/login:
    post:
      tags:
        - users
      summary: ƒêƒÉng nh·∫≠p
      description: ƒêƒÉng nh·∫≠p v√†o h·ªá th·ªëng
      operationId: login
      requestBody:
        description: Th√¥ng tin ƒëƒÉng nh·∫≠p
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
      responses:
        '200':
          description: ƒêƒÉng nh·∫≠p th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Login success'
                  result:
                    $ref: '#/components/schemas/SuccessAuthentication'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid request'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Not found'
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation exception'
  /users/logout:
    post:
      tags:
        - users
      summary: ƒêƒÉng xu·∫•t
      description: ƒêƒÉng xu·∫•t kh·ªèi h·ªá th·ªëng v√† v√¥ hi·ªáu h√≥a refresh token
      operationId: logout
      security:
        - BearerAuth: []
      requestBody:
        description: Th√¥ng tin refresh token
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: '{{refresh_token}}'
      responses:
        '200':
          description: ƒêƒÉng xu·∫•t th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Logout success'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      refresh_token:
                        type: object
                        properties:
                          type:
                            type: string
                            example: 'field'
                          value:
                            type: string
                            example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU0YjkxMGQ3OTI4MzhhYjRkN2ZmOTFhIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE3MDE2NzIxOTcsImV4cCI6MTczMzIyOT30.sFhsPVCcyFrOh7CRpmbz7VgwbzHl5bjTmcEuAljzMhc'
                          msg:
                            type: string
                            example: "Expected ',' or '}' after property value in JSON at position 94"
                          path:
                            type: string
                            example: 'refresh_token'
                          location:
                            type: string
                            example: 'body'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid request'

  /users/me:
    patch:
      tags:
        - 'users'
      summary: C·∫≠p nh·∫≠t th√¥ng tin user
      description: L·∫•y th√¥ng tin user hi·ªán t·∫°i
      operationId: updateMe
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            example:
              name: 'duyanh nahaha'
              location: 'Hoai Duc, Ha Noi'
              website: 'xinchaoduyanh.com'
              date_of_birth: '2003-12-19T16:06:28.409Z'
              avatar: 'https://twitter-ap-southeast-1-by-duyanh.s3.ap-southeast-1.amazonaws.com/images/865bc6c168ba0d15804351201.jpg'
              bio: 'A software developer'
      responses:
        '200':
          description: User update success
          content:
            application/json:
              example:
                message: 'User update success'
                result:
                  _id: '654b910d792838ab4d7ff91a'
                  name: 'duyanh nahaha'
                  email: 'duyanh19122k3+7@gmail.com'
                  date_of_birth: '2003-12-19T16:06:28.409Z'
                  created_at: '2023-11-08T13:45:49.366Z'
                  updated_at: '2023-12-05T06:22:27.957Z'
                  verify: 1
                  twitter_circle: []
                  bio: 'A software developer'
                  location: 'Hoai Duc, Ha Noi'
                  website: 'xinchaoduyanh.com'
                  username: 'user654b910d792838ab4d7ff91a'
                  avatar: 'https://twitter-ap-southeast-1-by-duyanh.s3.ap-southeast-1.amazonaws.com/images/865bc6c168ba0d15804351201.jpg'
                  cover_photo: ''
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid request'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Not found'
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation exception'
                  errors:
                    type: object
                    properties:
                      username:
                        type: object
                        properties:
                          type:
                            type: string
                            example: 'field'
                          value:
                            type: string
                            example: 'user654b910d792838ab4d7ff91a'
                          msg:
                            type: string
                            example: 'Username must be 4-15 characters long and contain only letters, numbers, underscores, and not only numbers'
                          path:
                            type: string
                            example: 'username'
                          location:
                            type: string
                            example: 'body'
    get:
      tags:
        - users
      summary: L·∫•y th√¥ng tin user
      description: L·∫•y th√¥ng tin user hi·ªán t·∫°i
      operationId: getMe
      security:
        - BearerAuth: []
      responses:
        '200':
          description: L·∫•y th√¥ng tin user th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Get my profile success'
                  result:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid request'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Not found'
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation exception'
  /users/refresh_token:
    post:
      tags:
        - users
      summary: Refresh token
      description: C·∫≠p nh·∫≠t access token m·ªõi b·∫±ng refresh token
      operationId: refresh_token
      requestBody:
        description: Th√¥ng tin refresh token
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: 'old_refresh_token'
      responses:
        '200':
          description: C·∫≠p nh·∫≠t token th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Refresh token success'
                  result:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: 'your_new_access_token_here'
                      refresh_token:
                        type: string
                        example: 'your_new_refresh_token_here'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Refresh token is used or not exist'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid request'

  /users/register:
    post:
      tags:
        - users
      summary: ƒêƒÉng k√Ω
      description: ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
      operationId: register
      requestBody:
        description: Th√¥ng tin ƒëƒÉng k√Ω
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBody'
      responses:
        '200':
          description: ƒêƒÉng k√Ω th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Success to register'
                  result:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: 'your_access_token_here'
                      refresh_token:
                        type: string
                        example: 'your_refresh_token_here'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      email:
                        type: object
                        properties:
                          type:
                            type: string
                            example: 'field'
                          value:
                            type: string
                            example: 'duyanh19122k3+8@gmail.com'
                          msg:
                            type: string
                            example: 'Email is already exist'
                          path:
                            type: string
                            example: 'email'
                          location:
                            type: string
                            example: 'body'

        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid request'

  /users/reset_password:
    post:
      tags:
        - users
      summary: ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
      description: ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u c·ªßa ng∆∞·ªùi d√πng sau khi qu√™n m·∫≠t kh·∫©u
      operationId: resetPassword
      security:
        - BearerAuth: []
      requestBody:
        description: Th√¥ng tin ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Reset password success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Reset password success'
  /users/verify_email:
    post:
      tags:
        - users
      summary: X√°c th·ª±c email
      description: X√°c th·ª±c email ng∆∞·ªùi d√πng sau khi ƒëƒÉng k√Ω
      operationId: verifyEmail
      requestBody:
        description: Th√¥ng tin ƒë·ªÉ x√°c th·ª±c email
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Email verify success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Email verify success'
                  result:
                    $ref: '#/components/schemas/VerifyEmailResult'
  /users/unfollow/{user_id}:
    delete:
      tags:
        - users
      summary: H·ªßy theo d√µi ng∆∞·ªùi d√πng
      description: H·ªßy theo d√µi m·ªôt ng∆∞·ªùi d√πng kh√°c
      operationId: followUser
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn hu·ª∑ theo d√µi
          schema:
            type: string
      security:
        - BearerAuth: []
      requestBody:
        description: Th√¥ng tin ng∆∞·ªùi d√πng c·∫ßn theo d√µi
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowRequest'
      responses:
        '200':
          description: Follow success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Follow success'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid followed user id'
  /users/verify_forgot_password:
    post:
      tags:
        - users
      summary: X√°c th·ª±c token qu√™n m·∫≠t kh·∫©u
      description: X√°c th·ª±c token ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u sau khi qu√™n m·∫≠t kh·∫©u
      operationId: verifyForgotPassword
      requestBody:
        description: Th√¥ng tin ƒë·ªÉ x√°c th·ª±c token qu√™n m·∫≠t kh·∫©u
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyForgotPasswordRequest'
      responses:
        '200':
          description: Forget password verify success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Forget password verify success !'

  /medias/upload_image:
    post:
      tags:
        - medias
      summary: T·∫£i l√™n h√¨nh ·∫£nh
      description: T·∫£i l√™n h√¨nh ·∫£nh v√† nh·∫≠n k·∫øt qu·∫£
      operationId: uploadImage
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: string
                  format: binary
      responses:
        '200':
          description: T·∫£i l√™n th√†nh c√¥ng
          content:
            application/json:
              example:
                message: Upload success
                res:
                  - url: 'https://twitter-ap-southeast-1-by-duyanh.s3.ap-southeast-1.amazonaws.com/images/865bc6c168ba0d15804351201.jpg'
                    type: 0
        '400':
          description: L·ªói y√™u c·∫ßu kh√¥ng h·ª£p l·ªá
          content:
            application/json:
              example:
                message: Invalid request
        '422':
          description: L·ªói x√°c th·ª±c ho·∫∑c x·ª≠ l√Ω y√™u c·∫ßu
          content:
            application/json:
              example:
                message: Validation or processing error
  /medias/upload_video:
    post:
      tags:
        - medias
      summary: T·∫£i l√™n video
      description: T·∫£i l√™n video v√† nh·∫≠n k·∫øt qu·∫£
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                video:
                  type: string
                  format: binary
      responses:
        '200':
          description: T·∫£i l√™n th√†nh c√¥ng
          content:
            application/json:
              example:
                message: Upload success
                res:
                  - url: 'https://twitter-ap-southeast-1-by-duyanh.s3.ap-southeast-1.amazonaws.com/videos/WMQpgat_Y-.mp4'
                    type: 0
        '400':
          description: L·ªói y√™u c·∫ßu kh√¥ng h·ª£p l·ªá
          content:
            application/json:
              example:
                message: Invalid request
        '422':
          description: L·ªói x√°c th·ª±c ho·∫∑c x·ª≠ l√Ω y√™u c·∫ßu
          content:
            application/json:
              example:
                message: Validation or processing error
  /medias/upload_video_hls:
    post:
      tags:
        - medias
      summary: T·∫£i l√™n video HLS
      description: T·∫£i l√™n video HLS v√† nh·∫≠n k·∫øt qu·∫£
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                video:
                  type: string
                  format: binary
      responses:
        '200':
          description: T·∫£i l√™n th√†nh c√¥ng
          content:
            application/json:
              example:
                message: Upload success
                res:
                  - url: 'https://twitter-ap-southeast-1-by-duyanh.s3.ap-southeast-1.amazonaws.com/videos/WMQpgat_Y-.mp4'
                    type: 0
        '400':
          description: L·ªói y√™u c·∫ßu kh√¥ng h·ª£p l·ªá
          content:
            application/json:
              example:
                message: Invalid request
        '422':
          description: L·ªói x√°c th·ª±c ho·∫∑c x·ª≠ l√Ω y√™u c·∫ßu
          content:
            application/json:
              example:
                message: Validation or processing error
  /medias/video-status/{videoId}:
    get:
      tags:
        - medias
      summary: L·∫•y tr·∫°ng th√°i video
      description: L·∫•y tr·∫°ng th√°i video d·ª±a tr√™n videoId
      operationId: getVideoStatus
      security:
        - BearerAuth: []
      parameters:
        - name: videoId
          in: path
          required: true
          description: ID c·ªßa video
          schema:
            type: string
      responses:
        '200':
          description: Get video status success
          content:
            application/json:
              example:
                result:
                  _id: "65740561dd6f6521626ba86c"
                  name: "Wjx1h1DQKR"
                  status: 1
                  message: ""
                  createdAt: "2023-12-09T06:12:49.171Z"
                  updatedAt: "2023-12-09T06:18:37.670Z"
                message: "Get video status success"
  /tweets/:
    post:
      tags:
        - Tweets
      summary: T·∫°o tweet
      description: T·∫°o m·ªôt tweet m·ªõi
      operationId: createTwee
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            example:
              type: 3
              audience: 1
              content: "quotes7"
              parent_id: "653a0f8e6b303cd8f0029501"
              hashtags: ["hihi"]
              mentions: ["65256575fea2a4e2d7ba4bc8", "652429d6e407d3af0e0940bb", "65256c0c359c47ea413f1efb", "652693520bcbc48a48a0559d"]
              medias: []
              ok: "xam vao canh tay hinh bong hoa cuc chay ne hihi"
      responses:
        '201':
          description: Create tweet successfully
          content:
            application/json:
              example:
                message: "Create tweet successfully"
                result:
                  _id: "658d4ba79e0cff2db04267d8"
                  user_id: "655767fa92a4a0e052e35f4f"
                  type: 3
                  audience: 1
                  content: "quotes7"
                  parent_id: "653a0f8e6b303cd8f0029501"
                  hashtags:
                    - "6534fa364c55b5d0c2af95aa"
                  mentions:
                    - "65256575fea2a4e2d7ba4bc8"
                    - "652429d6e407d3af0e0940bb"
                    - "65256c0c359c47ea413f1efb"
                    - "652693520bcbc48a48a0559d"
                  medias: []
                  guest_views: 0
                  user_views: 0
                  created_at: "2023-12-28T10:19:19.872Z"
                  updated_at: "2023-12-28T10:19:19.872Z"
  /tweets/{tweetId}:
    get:
      tags:
        - Tweets
      summary: L·∫•y th√¥ng tin tweet
      description: L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt tweet d·ª±a tr√™n tweetId
      operationId: getTweet
      security:
        - BearerAuth: []
      parameters:
        - name: tweetId
          in: path
          required: true
          description: ID c·ªßa tweet
          schema:
            type: string
      responses:
        '200':
          description: Get tweet successfully
          content:
            application/json:
              example:
                message: "Get tweet successfully"
                result:
                  _id: "6534f6539de511a70065e9e5"
                  user_id: "65256c0c359c47ea413f1efb"
                  type: 0
                  audience: 0
                  content: "who la duy anh dep trai is"
                  parent_id: null
                  hashtags: []
                  medias: []
                  guest_views: 0
                  user_views: 2
                  created_at: "2023-10-22T10:15:47.301Z"
                  updated_at: "2023-12-28T10:44:19.273Z"
                  mentions: []
                  bookmarks: []
                  likes: []
                  bookmarks_count: 0
                  likes_count: 0
                  retweet_count: 0
                  comment_count: 0
                  quote_count: 0
        '403':
          description: User not in Twitter circle of author
          content:
            application/json:
              example:
                message: "User not in Twitter circle of author"
  /bookmarks:  
    post:
      tags:
      - Bookmark
      summary: T·∫°o bookmark cho 1 Tweets
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tweet_id:
                  type: string
                  example: "653a0f8e6b303cd8f0029501"
      responses:
        '200':
          description: Bookmark tweet success
          content:
            application/json:
              example:
                message: "Bookmark tweet success"
                result:
                  _id: "65965370376f7be2896b9f96"
                  tweet_id: "653a0f8e6b303cd8f0029501"
                  user_id: "655767fa92a4a0e052e35f4f"
                  created_at: "2024-01-04T06:42:56.692Z"
        '422':
          description: Validation error
          content:
            application/json:
              example:
                message: "Validation error"
                errors:
                  tweet_id:
                    type: "field"
                    value: "653a0f8e6b303cd8f00295101"
                    msg: "Tweet id must be a valid tweet id"
                    path: "tweet_id"
                    location: "body"
  /bookmarks/tweets/{tweetId}:
    delete:
      tags:
      - Bookmark
      summary: X√≥a ƒëi 1 bookmark ƒë√£ ƒëc  t·∫°o
      security:
        - BearerAuth: []
      parameters:
        - name: tweetId
          in: path
          required: true
          description: ID c·ªßa tweet
          schema:
            type: string
      responses:
        '200':
          description: Unbookmark tweet success
          content:
            application/json:
              example:
                message: "Unbookmark tweet success"
                result:
                  _id: "65965370376f7be2896b9f96"
                  tweet_id: "653a0f8e6b303cd8f0029501"
                  user_id: "655767fa92a4a0e052e35f4f"
                  created_at: "2024-01-04T06:42:56.692Z"
        '422':
          description: Validation error
          content:
            application/json:
              example:
                message: "Validation error"
                errors:
                  tweet_id:
                    type: "field"
                    value: "653a0f8e6b303cd8f00295012"
                    msg: "Tweet id must be a valid tweet id"
                    path: "tweet_id"
                    location: "body"

  /likes:  
    post:
      tags:
      - Like
      summary: Th·ª±c hi·ªán vi·ªác Like cho 1 Tweets
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tweet_id:
                  type: string
                  example: "653a0f8e6b303cd8f0029501"
      responses:
        '200':
          description: Like tweet success
          content:
            application/json:
              example:
                message: "Like tweet success"
                result:
                  _id: "65965370376f7be2896b9f96"
                  tweet_id: "653a0f8e6b303cd8f0029501"
                  user_id: "655767fa92a4a0e052e35f4f"
                  created_at: "2024-01-04T06:42:56.692Z"
        '422':
          description: Validation error
          content:
            application/json:
              example:
                message: "Validation error"
                errors:
                  tweet_id:
                    type: "field"
                    value: "653a0f8e6b303cd8f00295101"
                    msg: "Tweet id must be a valid tweet id"
                    path: "tweet_id"
                    location: "body"
  /likes/tweets/{tweetId}:
    delete:
      tags:
      - Like
      summary: H·ªßy like 1 tweet
      security:
        - BearerAuth: []
      parameters:
        - name: tweetId
          in: path
          required: true
          description: ID c·ªßa tweet
          schema:
            type: string
      responses:
        '200':
          description: Unlike tweet success
          content:
            application/json:
              example:
                message: "Unlike tweet success"
                result:
                  _id: "65965370376f7be2896b9f96"
                  tweet_id: "653a0f8e6b303cd8f0029501"
                  user_id: "655767fa92a4a0e052e35f4f"
                  created_at: "2024-01-04T06:42:56.692Z"
        '422':
          description: Validation error
          content:
            application/json:
              example:
                message: "Validation error"
                errors:
                  tweet_id:
                    type: "field"
                    value: "653a0f8e6b303cd8f00295012"
                    msg: "Tweet id must be a valid tweet id"
                    path: "tweet_id"
                    location: "body"
  /search:
    post:
      tags:
      - Search
      summary: T√¨m ki·∫øm Tweets v·ªõi 1 ho·∫∑c c√°c t·ª´ kh√≥a cho tr∆∞·ªõc
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: content
          required: true
          schema:
            type: string
          description: T·ª´ kh√≥a c·∫ßn t√¨m ki·∫øm
        - in: query
          name: limit
          required: true
          schema:
            type: integer
          description: Number of tweets per page
          example: 2
        - in: query
          name: page
          required: true
          schema:
            type: integer
          description: Page number
          example: 1
        - in: query
          name: media_type
          schema:
            $ref: "#/components/schemas/MediaType"
          description: Type of media (e.g., video)
          example: "video"
      responses:
        '200':
          description: Successful search
          content:
            application/json:
              example:
                result:
                  tweets:
                    - _id: "653e8eab212c02b14caa0063"
                      user_id: "653e8e6e212c02b14ca9fab9"
                      type: 2
                      audience: 0
                      content: "hoc Adimpleo verbera arca solium sollicito. Aestas tersus ceno. Taceo bellum desipio benevolentia uter aliquid tabula succurro patior. Armarium conatus audacia. Velociter distinctio delectus inflammatio alveus compello voluptate. Sequi dedecor titulus acer conor tremo. Illum repellendus comptus peior vinum pauci creber bonus. Nam tendo tabesco constans ullam contego catena amo labore acquiro. Pecto allatus ventus comes deduco. Ab cuppedia calco aranea conservo torqueo. Doloremque calco surculus thesaurus. Communis deleniti aliquam dolore caste vel tamdiu. Ademptio brevis depraedor casus creptio strues. Delectus thermae accusamus summisse amaritudo adimpleo. Vestrum terror crinis modi carmen facilis adipisci cunabula caute soluta. Tremo verecundia pax autem somnus sub solutio. Vita reprehenderit adeptio. Audentia damnatio admitto inventore tempora tenetur cinis. Color conforto cauda vilitas. Rerum tenetur cena. Amplitudo civis comparo aro perferendis. Modi tamdiu tracto carcer. Vociferor verus talis uter. Vomica apostolus umquam. Tracto somnus depono conturbo. Coniuratio abscido aro temperantia apostolus. Adeptio amoveo cohors vilitas cerno. Cohaero voluptatum tantillus contabesco coaegresco comis apostolus stips aeternus atavus. Angustus usque vulgaris veritatis. Ceno velut balbus beatus. Adfero speciosus cedo arbitro alioqui coaegresco ipsam. Defluo amplexus arceo taceo aestas supplanto. Strenuus adipiscor truculenter amet dolorum contigo temeritas tonsor modi vorax. Trucido abstergo pauci temporibus bis. Cumque voluptas officia aspernatur vereor cuius ventosus synagoga dedecor saepe. Ad tenus decimus. Vitae quas callide abstergo vulnus reiciendis paulatim adhuc nemo. Tumultus consequuntur argumentum odit ipsam. Cruentus cibus fugiat repellendus decerno apparatus suasoria bonus. Ciminatio ascit ver aptus bellicus. Neque vorago accedo absorbeo. Turpis calcar minima tenus abundans cubo possimus suscipio. Amplitudo valetudo conitor quisquam suppellex uberrime. Comburo tametsi veritas defendo vobis sumo mollitia caterva thesaurus vorax. Tactus defaeco uter addo socius velociter depulso. Vilicus curriculum vobis. Tui ventus valeo. Culpa derideo versus ver. Numquam magni tres tergo sui adversus ambulo. Umbra certe tabula amplexus ad accendo conventus. Coniuratio terra arbustum absorbeo supellex commodi. Amissio caries calamitas demitto conculco contra ascisco acsi. Tot amiculum thema artificiose baiulus curtus aegrotatio validus. Vacuus vereor caute textus. Thema aduro calcar calculus conor speciosus asperiores amaritudo ultra voluptate. Paulatim cumque termes via ustulo conventus. Ambulo vinum spiritus bellicus ademptio aeneus. Teres fugiat vestigium carmen decumbo est iste. Deludo tero cuius capio vapulus amitto. Anser considero decor cupiditate theologus. Tum itaque sulum. Spiritus cohors absorbeo omnis alienus terror valde delibero. Terebro verbera vulgaris. Conatus subiungo callide placeat cubo comptus."
                      hashtags:
                        - "653e8b45f96b77c9e5c4fe86"
                        - "653e8b45f96b77c9e5c4fe87"
                        - "653e8b45f96b77c9e5c4fe88"
                        - "653e8b45f96b77c9e5c4fe89"
                        - "653e8b45f96b77c9e5c4fe8a"
                        - "653e8b45f96b77c9e5c4fe8b"
                      medias:
                        - type: 2
                          url: "https://picsum.photos/seed/oQKBMg/640/480"
                      created_at: "2023-10-29T16:56:13.085Z"
                      updated_at: "2024-01-04T07:06:06.019Z"
                      guest_views: 0
                      user_views: 10
                      author:
                        name: "Priscilla.Ward"
                        email: "Ellsworth.Welch74@gmail.com"
                        twitter_circle: []
                        bio: ""
                        location": ""
                        website": ""
                        username: "user653e8e6e212c02b14ca9fab9"
                        avatar": ""
                        cover_photo": ""
                      bookmarks: []
                      likes: []
                      bookmarks_count: 0
                      likes_count: 0
                      retweet_count: 0
                      comment_count: 0
                      quote_count: 0
                  total: 1
  /conversations/receiver/{receiverId}:
    get:
      tags:
        - Conversation
      security:
        - BearerAuth: []
      summary: L·∫•y ra tin nh·∫Øn t·ª´ Id c·ªßa ng∆∞·ªùi mu·ªën nh·∫Øn tin
      parameters:
        - in: path
          name: receiverId
          required: true
          schema:
            type: string
          description: ID of the receiver
          example: "654b910d792838ab4d7ff91a"
        - in: query
          name: limit
          required: true
          schema:
            type: integer
          description: Number of conversations per page
          example: 10
        - in: query
          name: page
          required: true
          schema:
            type: integer
          description: Page number
          example: 1
      responses:
        '200':
          description: Get conversation successfully
          content:
            application/json:
              example:
                message: "Get conversation successfully"
                result:
                  conversations:
                    - _id: "656b6de905c02b2c7cda53e9"
                      receiver_id: "654b910d792838ab4d7ff91a"
                      sender_id: "655767fa92a4a0e052e35f4f"
                      content: "hahaah"
                      created_at: "2023-12-02T17:48:25.877Z"
                      updated_at: "2023-12-02T17:48:25.877Z"
                    - _id: "656b6de805c02b2c7cda53e8"
                      receiver_id: "655767fa92a4a0e052e35f4f"
                      sender_id: "654b910d792838ab4d7ff91a"
                      content: "dung rui"
                      created_at: "2023-12-02T17:48:24.192Z"
                      updated_at: "2023-12-02T17:48:24.192Z"
                    - _id: "656b6de505c02b2c7cda53e7"
                      receiver_id: "654b910d792838ab4d7ff91a"
                      sender_id: "655767fa92a4a0e052e35f4f"
                      content: "dung ko"
                      created_at: "2023-12-02T17:48:21.995Z"
                      updated_at: "2023-12-02T17:48:21.995Z"
                    - _id: "656b6de405c02b2c7cda53e6"
                      receiver_id: "654b910d792838ab4d7ff91a"
                      sender_id: "655767fa92a4a0e052e35f4f"
                      content: "lam duoc roi"
                      created_at: "2023-12-02T17:48:20.441Z"
                      updated_at: "2023-12-02T17:48:20.441Z"
                    - _id: "656b6de105c02b2c7cda53e5"
                      receiver_id: "655767fa92a4a0e052e35f4f"
                      sender_id: "654b910d792838ab4d7ff91a"
                      content: "chung ta"
                      created_at: "2023-12-02T17:48:17.580Z"
                      updated_at: "2023-12-02T17:48:17.580Z"
                  total: 97
                  total_page: 20
                  limit: 5
                  page: 1  

components:
  schemas:
    LoginBody:
      type: object
      properties:
        email:
          type: string
          example: duyanh19122k3+7@gmail.com
        password:
          type: string
          example: Duyanh11!123
    RegisterBody:
      type: object
      properties:
        password:
          type: string
          example: Duyanh11!123
        confirm_password:
          type: string
          example: Duyanh11!123
        email:
          type: string
          example: duyanh19122k3+8@gmail.com
        name:
          type: string
          example: duyanh ne
        date_of_birth:
          type: string
          format: date-time
          example: '2023-09-15T16:06:28.409Z'
    SuccessAuthentication:
      type: object
      properties:
        access_token:
          type: string
          example: 'your_access_token_here'
        refresh_token:
          type: string
          example: 'your_refresh_token_here'
    User:
      type: object
      properties:
        _id:
          type: string
          format: MongoDB ObjectId
          example: '654b910d792838ab4d7ff91a'
        name:
          type: string
          example: 'duyanh ne'
        email:
          type: string
          example: 'duyanh19122k3+7@gmail.com'
        date_of_birth:
          type: string
          format: date-time
          example: '2023-09-15T16:06:28.409Z'
        created_at:
          type: string
          format: date-time
          example: '2023-11-08T13:45:49.366Z'
        updated_at:
          type: string
          format: date-time
          example: '2023-11-08T14:37:53.587Z'
        verify:
          $ref: '#/components/schemas/UserVerifyStatus'

        twitter_circle:
          type: array
          items:
            type: string
            format: MongoId
          example: ['652429d6e407d3af0e0940bb', '65256575fea2a4e2d7ba4bc8']
        bio:
          type: string
          example: ''
        location:
          type: string
          example: ''
        website:
          type: string
          example: ''
        username:
          type: string
          example: 'user654b910d792838ab4d7ff91a'
        avatar:
          type: string
          example: 'https://twitter-ap-southeast-1-by-duyanh.s3.ap-southeast-1.amazonaws.com/images/865bc6c168ba0d15804351201.jpg'
        cover_photo:
          type: string
          example: 'https://twitter-ap-southeast-1-by-duyanh.s3.ap-southeast-1.amazonaws.com/images/865bc6c168ba0d15804351201.jpg'
    ChangePasswordRequest:
      type: object
      required:
        - old_password
        - password
        - confirm_password
      properties:
        old_password:
          type: string
          example: 'Toideptr@i123'
        password:
          type: string
          example: 'Duyanh11!123'
        confirm_password:
          type: string
          example: 'Duyanh11!123'
    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: 'duyanh19122k3+7@gmail.com'
    UserVerifyStatus:
      type: number
      enum: ['Unverified', 'Verified', 'Banned']
      example: 1
      description: |
        Enum representing the user verification status.

        - `Unverified`: Email not yet verified (default value = 0).
        - `Verified`: Email has been verified.
        - `Banned`: User is banned.
    FollowRequest:
      type: object
      required:
        - followed_user_id
      properties:
        followed_user_id:
          type: string
          example: '652429d6e407d3af0e0940bb'
    ResetPasswordRequest:
      type: object
      required:
        - password
        - confirm_password
        - forgot_password_token
      properties:
        password:
          type: string
          example: 'Xx12345@1'
        confirm_password:
          type: string
          example: 'Xx12345@1'
        forgot_password_token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU0YjkxMGQ3OTI4MzhhYjRkN2ZmOTFhIiwidG9rZW5fdHlwZSI6MiwidmVyaWZ5IjoxLCJpYXQiOjE3MDE3NjA5MjYsImV4cCI6MTcwMjM2NTcyNn0.sbfV9LIL0mllJKzXDKzGKEDBQqX1iujZAraHIH_LjA4'
    VerifyEmailRequest:
      type: object
      required:
        - email_verify_token
      properties:
        email_verify_token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU2ZWQxYTUzYTVhYzQ3MWQwN2FjNzYzIiwidG9rZW5fdHlwZSI6MywidmVyaWZ5IjowLCJpYXQiOjE3MDE3NjE0NDUsImV4cCI6MTcwMjM2NjI0NX0.DsqvjuGav_EkLLoar6mrz7O24YAIUWugD853fbQPUcQ'
    VerifyEmailResult:
      type: object
      properties:
        access_token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5CI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU2ZWQxYTUzYTVhYzQ3MWQwN2FjNzYzIiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE3MDE3NjE2ODIsImV4cCI6MTcwMTc2MjU4Mn0.qDDTVF8z8gB4z_79YbgXXrBhylFkZqtraNE661Qxgqo'
        refresh_token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5CI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU2ZWQxYTUzYTVhYzQ3MWQwN2FjNzYzIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE3MDE3NjE2ODIsImV4cCI6MTczMzMxOTI4Mn0.4NSbcRbdA0GE7unbnsEVRx_YrZT0N3CBjjnTVxrzVzg'
    VerifyForgotPasswordRequest:
      type: object
      required:
        - forgot_password_token
      properties:
        forgot_password_token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5CI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU2ZWQxYTUzYTVhYzQ3MWQwN2FjNzYzIiwidG9rZW5fdHlwZSI6MiwidmVyaWZ5IjoxLCJpYXQiOjE3MDE3NjIzOTUsImV4cCI6MTcwMjM2NzE5NX0.HWo_VeSh-xGEs8SuIyvXAbFHvuj8fMCXu-Hhu1wNZAc'
    MediaType:
      type: string
      enum:
        - "video"
        - "image"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
